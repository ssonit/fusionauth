// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  description String      @db.Text
  userId      String      @map("user_id")
  colors      Color[]     @relation("ProductColor")
  images      Image[]
  cartItem    CartItem[]
  orderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([colorId])
  @@index([userId])
}

model OrderItem {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  productId   String
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId     String
  color       Color        @relation(fields: [colorId], references: [id])
  quantity    Int
  isPaid      Boolean      @default(false)
  username    String
  phone       String?      @default("")
  address     String?      @default("")
  notes       String?      @default("")
  paymentType PaymentType? @default(COD)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([colorId])
}

model Color {
  id        String      @id @default(uuid())
  name      String
  value     String
  product   Product[]   @relation("ProductColor")
  cartItem  CartItem[]
  orderItem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum StatusOrder {
  Success
  Cancelled
}

enum PaymentType {
  COD
  ZALO
}
